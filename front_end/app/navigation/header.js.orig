angular.module('voluntrApp')
  .controller('HeaderCtrl', function ($scope, $rootScope, searchService,$window,
                                      $mdSidenav, $http, $stateParams, $timeout, $modal) {

    $scope.search_filter = searchService.search;




    $scope.isOpen = false;
    $scope.demo = {
      isOpen: false,
      count: 0,
      selectedAlignment: 'md-right'
    };

    $scope.supportModal = function(size){
      var supportModal = $modal.open(
        {
          templateUrl: 'organizations/modals/support_form.html',
          controller: 'SupportFormCtrl',
          windowClass: 'add-event-modal-window',
          size: size,
          resolve: {
            current_state: function() {
              return $scope.current_state;
            }
          }
        });
      supportModal.result.then(function () {

        },
        function () {

        });
    }

    $scope.open = function() {
      $mdSidenav('left').open()
        .then(function () {
          $scope.menu_open = true;
          console.log($scope.menu_open)
        });
    }

    var resultsFormat = function(raw_result) {
      var base_result = raw_result._source
      var result = {}
      if (raw_result._type == "organization_person" &&
        base_result.person &&
        base_result.person.first_name && base_result.person.first_name ) {
        result.id = base_result.person_id;
        result.type = "person";
        result.title = base_result.person.first_name + " " + base_result.person.last_name;
      } else if (raw_result._type == "opportunity") {
        result.id = base_result.id;
        result.type = "opportunity";
        result.title = base_result.name;
      }
      $scope.results.push(result)
    };

    $scope.loading = false;
    $scope.$watch('search_query', function () {
      $scope.results = [];
      if ($scope.search_query && !$scope.loading) {
        $scope.searching = true;
        $scope.loading = true;
        $http({
          url: 'api/v1/organizations/' + $stateParams.organization_Id + '/search',
          params: {query: $scope.search_query}
        }).
          success(function(data, status, headers, config) {
            angular.forEach(data, resultsFormat)
            $scope.loading = false;
          }).
          error(function(data, status, headers, config) {
          });
      } else if (!$scope.search_query) {
        $scope.searching = false;
      }
    });

    $scope.close = function () {
      $mdSidenav('left').close()
        .then(function () {
          $scope.menu_open = false;
        });
    };

    $scope.openModal = function(result) {
      if (result.type === 'person') {
        var personDetailModal = $modal.open(
          {
            templateUrl: 'organizations/modals/person_detail_modal.html',
            controller: 'PersonDetailCtrl',
            windowClass: 'add-event-modal-window',
            size: 'lg',
            resolve: {
              id: function () {
                return result.id
              }
            }

          });


        personDetailModal.result.then(function () {

          },
          function () {
            console.log('Modal dismissed at: ' + new Date());
          });
      } else if (result.type === 'opportunity') {
        var opportunityDetailModal = $modal.open(
          {
            templateUrl: 'organizations/modals/opportunity_detail_modal.html',
            controller: 'OpportunityDetailCtrl',
            windowClass: 'add-event-modal-window',
            size: 'lg',
            resolve:
            {
              id: function () {
                return result.id
              },
              start_time: function() {
                return 0
              }
            }

          });



        opportunityDetailModal.result.then(function () {

          },
          function () {
            console.log('Modal dismissed at: ' + new Date());
          });
      }
    };




  });

<<<<<<< HEAD
/*!
 * classie v1.0.0
 * class helper functions
 * from bonzo https://github.com/ded/bonzo
 * MIT license
 * 
 * classie.has( elem, 'my-class' ) -> true/false
 * classie.add( elem, 'my-new-class' )
 * classie.remove( elem, 'my-unwanted-class' )
 * classie.toggle( elem, 'my-class' )
 */

/*jshint browser: true, strict: true, undef: true, unused: true */
/*global define: false */

( function( window ) {

'use strict';

// class helper functions from bonzo https://github.com/ded/bonzo

function classReg( className ) {
  return new RegExp("(^|\\s+)" + className + "(\\s+|$)");
}

// classList support for class management
// altho to be fair, the api sucks because it won't accept multiple classes at once
var hasClass, addClass, removeClass;

if ( 'classList' in document.documentElement ) {
  hasClass = function( elem, c ) {
    return elem.classList.contains( c );
  };
  addClass = function( elem, c ) {
    elem.classList.add( c );
  };
  removeClass = function( elem, c ) {
    elem.classList.remove( c );
  };
}
else {
  hasClass = function( elem, c ) {
    return classReg( c ).test( elem.className );
  };
  addClass = function( elem, c ) {
    if ( !hasClass( elem, c ) ) {
      elem.className = elem.className + ' ' + c;
    }
  };
  removeClass = function( elem, c ) {
    elem.className = elem.className.replace( classReg( c ), ' ' );
  };
}

function toggleClass( elem, c ) {
  var fn = hasClass( elem, c ) ? removeClass : addClass;
  fn( elem, c );
}

var classie = {
  // full names
  hasClass: hasClass,
  addClass: addClass,
  removeClass: removeClass,
  toggleClass: toggleClass,
  // short names
  has: hasClass,
  add: addClass,
  remove: removeClass,
  toggle: toggleClass
};

// transport
if ( typeof define === 'function' && define.amd ) {
  // AMD
  define( classie );
} else {
  // browser global
  window.classie = classie;
}

})( window );

function init() {
        window.addEventListener('scroll', function(e){
            var distanceY = window.pageYOffset || document.documentElement.scrollTop,
                shrinkOn = 300,
                header = document.querySelector(".application-header");
            if (distanceY > shrinkOn) {
                classie.add(header,"smaller");
            } else {
                if (classie.has(header,"smaller")) {
                    classie.remove(header,"smaller");
                }
            }
        });
    }
    window.onload = init();
=======
>>>>>>> 0b0cc5f97404951b835bf1a51af4601d1aaacff3

